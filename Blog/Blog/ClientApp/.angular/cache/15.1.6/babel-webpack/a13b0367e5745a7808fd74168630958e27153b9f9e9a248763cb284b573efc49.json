{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthInterceptor {\n  intercept(req, next) {\n    const idToken = localStorage.getItem(\"token\");\n    if (idToken) {\n      console.log(idToken);\n      const cloned = req.clone({\n        headers: req.headers.set(\"Authorization\", \"Bearer \" + idToken)\n      });\n      return next.handle(cloned);\n    } else {\n      return next.handle(req);\n    }\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)();\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,eAAe;EAExBC,SAAS,CAACC,GAAqB,EACrBC,IAAiB;IAEvB,MAAMC,OAAO,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE7C,IAAIF,OAAO,EAAE;MACTG,OAAO,CAACC,GAAG,CAACJ,OAAO,CAAC;MACpB,MAAMK,MAAM,GAAGP,GAAG,CAACQ,KAAK,CAAC;QACrBC,OAAO,EAAET,GAAG,CAACS,OAAO,CAACC,GAAG,CAAC,eAAe,EACpC,SAAS,GAAGR,OAAO;OAC1B,CAAC;MAEF,OAAOD,IAAI,CAACU,MAAM,CAACJ,MAAM,CAAC;KAC7B,MACI;MACD,OAAON,IAAI,CAACU,MAAM,CAACX,GAAG,CAAC;;EAE/B;;AAnBSF,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAc,SAAfd,eAAe;AAAA","names":["AuthInterceptor","intercept","req","next","idToken","localStorage","getItem","console","log","cloned","clone","headers","set","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\Georgi Petrov\\source\\PetrovBlog\\Blog\\Blog\\ClientApp\\src\\app\\common\\auth-interceptor.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n    \r\n    intercept(req: HttpRequest<any>,\r\n              next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        const idToken = localStorage.getItem(\"token\");\r\n\r\n        if (idToken) {\r\n            console.log(idToken);\r\n            const cloned = req.clone({\r\n                headers: req.headers.set(\"Authorization\",\r\n                    \"Bearer \" + idToken)\r\n            });\r\n\r\n            return next.handle(cloned);\r\n        }\r\n        else {\r\n            return next.handle(req);\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}