{"ast":null,"code":"import { GlobalComponent } from '../global-component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PostService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.url = '/post/';\n    this.allUrl = '/post/all';\n  }\n  getById(id) {\n    return this.httpClient.get(GlobalComponent.appUrl + this.url + id);\n  }\n  all() {\n    return this.httpClient.get(GlobalComponent.appUrl + this.allUrl);\n  }\n  add(newPost) {\n    return this.httpClient.post(GlobalComponent.appUrl + this.url, newPost);\n  }\n  edit(editPost) {\n    return this.httpClient.put(GlobalComponent.appUrl + this.url, editPost);\n  }\n  delete(id) {\n    return this.httpClient.delete(GlobalComponent.appUrl + this.url + id);\n  }\n  handleError(error) {\n    let errMsg = error.message ? error.message : error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    return error;\n  }\n}\nPostService.ɵfac = function PostService_Factory(t) {\n  return new (t || PostService)(i0.ɵɵinject(i1.HttpClient));\n};\nPostService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PostService,\n  factory: PostService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,eAAe,QAAQ,qBAAqB;;;AAMrD,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAHtB,QAAG,GAAG,QAAQ;IACd,WAAM,GAAG,WAAW;EAG5B;EAEAC,OAAO,CAAIC,EAAU;IACnB,OAAO,IAAI,CAACF,UAAU,CAACG,GAAG,CAAIN,eAAe,CAACO,MAAM,GAAG,IAAI,CAACC,GAAG,GAAGH,EAAE,CAAC;EACvE;EAEAI,GAAG;IACD,OAAO,IAAI,CAACN,UAAU,CAACG,GAAG,CAAIN,eAAe,CAACO,MAAM,GAAG,IAAI,CAACG,MAAM,CAAC;EACrE;EAEAC,GAAG,CAACC,OAAc;IAChB,OAAO,IAAI,CAACT,UAAU,CAACU,IAAI,CAASb,eAAe,CAACO,MAAM,GAAG,IAAI,CAACC,GAAG,EAAEI,OAAO,CAAC;EACjF;EAEAE,IAAI,CAACC,QAAe;IAClB,OAAO,IAAI,CAACZ,UAAU,CAACa,GAAG,CAAShB,eAAe,CAACO,MAAM,GAAG,IAAI,CAACC,GAAG,EAAEO,QAAQ,CAAC;EACjF;EAEAE,MAAM,CAACZ,EAAU;IACf,OAAO,IAAI,CAACF,UAAU,CAACc,MAAM,CAAUjB,eAAe,CAACO,MAAM,GAAG,IAAI,CAACC,GAAG,GAAGH,EAAE,CAAC;EAChF;EAEQa,WAAW,CAACC,KAAU;IAC5B,IAAIC,MAAM,GAAID,KAAK,CAACE,OAAO,GAAIF,KAAK,CAACE,OAAO,GAAGF,KAAK,CAACG,MAAM,GAAG,GAAGH,KAAK,CAACG,MAAM,MAAMH,KAAK,CAACI,UAAU,EAAE,GAAG,cAAc;IACtH,OAAOJ,KAAK;EACd;;AA9BWlB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAuB,SAAXvB,WAAW;EAAAwB,YAFV;AAAM","names":["GlobalComponent","PostService","constructor","httpClient","getById","id","get","appUrl","url","all","allUrl","add","newPost","post","edit","editPost","put","delete","handleError","error","errMsg","message","status","statusText","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Georgi Petrov\\source\\PetrovBlog\\Blog\\Blog\\ClientApp\\src\\app\\common\\post.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, map, Observable, of, throwError } from 'rxjs';\nimport { GlobalComponent } from '../global-component';\nimport { IPost } from './shared/post';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n  private url = '/post/'\n  private allUrl = '/post/all'\n\n  constructor(private httpClient: HttpClient) { \n  }\n\n  getById<T>(id: string): Observable<T> {\n    return this.httpClient.get<T>(GlobalComponent.appUrl + this.url + id);\n  }\n\n  all<T>(): Observable<T> {\n    return this.httpClient.get<T>(GlobalComponent.appUrl + this.allUrl);\n  }\n\n  add(newPost: IPost): Observable<string> { // should has interface\n    return this.httpClient.post<string>(GlobalComponent.appUrl + this.url, newPost);\n  }\n\n  edit(editPost: IPost): Observable<string> { // should has interface with id\n    return this.httpClient.put<string>(GlobalComponent.appUrl + this.url, editPost);\n  }\n\n  delete(id: string): Observable<unknown> {\n    return this.httpClient.delete<unknown>(GlobalComponent.appUrl + this.url + id)\n  }\n\n  private handleError(error: any) { \n    let errMsg = (error.message) ? error.message : error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    return error;\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}