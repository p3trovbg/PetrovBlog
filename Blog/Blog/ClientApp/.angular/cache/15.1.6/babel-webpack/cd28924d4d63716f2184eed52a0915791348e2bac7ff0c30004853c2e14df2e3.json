{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoginService {\n  constructor(http) {\n    this.tokenName = 'token';\n    this.url = 'https://localhost:44366/identity/login';\n    this.isLogged = false;\n    this.http = http;\n    this.isLogged = this.getToken() ? true : false;\n  }\n  login(user) {\n    return this.http.post(this.url, user).pipe(tap(x => this.saveToken(x)));\n  }\n  saveToken(response) {\n    if (response == null || response == undefined) {\n      return;\n    }\n    const token = response.token;\n    localStorage.setItem(this.tokenName, token);\n    this.isLogged = true;\n  }\n  getToken() {\n    return localStorage.getItem(this.tokenName);\n  }\n  logout() {\n    localStorage.removeItem(this.tokenName);\n    this.isLogged = false;\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAAgEA,GAAG,QAAoB,MAAM;;;AAM7F,OAAM,MAAOC,YAAY;EAMvBC,YAAYC,IAAgB;IALnB,cAAS,GAAW,OAAO;IAEnC,QAAG,GAAW,wCAAwC;IAC/C,aAAQ,GAAG,KAAK;IAGpB,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACC,QAAQ,EAAE,GAAG,IAAI,GAAG,KAAK;EACjD;EAEAC,KAAK,CAACC,IAAS;IACZ,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,IAAI,CAACC,GAAG,EAAEF,IAAI,CAAC,CACpCG,IAAI,CACFV,GAAG,CAAEW,CAAC,IAAK,IAAI,CAACC,SAAS,CAACD,CAAC,CAAC,CAAC,CAC/B;EACJ;EAEAC,SAAS,CAACC,QAAa;IACpB,IAAIA,QAAQ,IAAI,IAAI,IAAIA,QAAQ,IAAIC,SAAS,EAAE;MAC5C;;IAGH,MAAMC,KAAK,GAAGF,QAAQ,CAACE,KAAK;IAC5BC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,SAAS,EAAEH,KAAK,CAAC;IAC3C,IAAI,CAACX,QAAQ,GAAG,IAAI;EACvB;EAEAC,QAAQ;IACL,OAAOW,YAAY,CAACG,OAAO,CAAC,IAAI,CAACD,SAAS,CAAC;EAC9C;EAEAE,MAAM;IACHJ,YAAY,CAACK,UAAU,CAAC,IAAI,CAACH,SAAS,CAAC;IACvC,IAAI,CAACd,QAAQ,GAAG,KAAK;EACxB;;AAnCUH,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAqB,SAAZrB,YAAY;EAAAsB,YAHX;AAAM","names":["tap","LoginService","constructor","http","isLogged","getToken","login","user","post","url","pipe","x","saveToken","response","undefined","token","localStorage","setItem","tokenName","getItem","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Georgi Petrov\\source\\PetrovBlog\\Blog\\Blog\\ClientApp\\src\\app\\common\\login.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { error } from 'console';\nimport { stringify } from 'querystring';\nimport { BehaviorSubject, catchError, map, Observable, Subject, tap, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class LoginService {\n   private tokenName: string = 'token';\n   private http: HttpClient;\n   url: string = 'https://localhost:44366/identity/login';\n   public isLogged = false;\n\n  constructor(http: HttpClient) {\n      this.http = http;\n      this.isLogged = this.getToken() ? true : false;\n   }\n\n   login(user: any): Observable<any>{\n      return this.http.post(this.url, user)\n      .pipe(\n         tap((x) => this.saveToken(x)),\n      );\n   } \n\n   saveToken(response: any) {\n      if (response == null || response == undefined) {\n         return;\n      }\n\n      const token = response.token;\n      localStorage.setItem(this.tokenName, token);\n      this.isLogged = true;\n   }\n\n   getToken() {\n      return localStorage.getItem(this.tokenName);\n   }\n\n   logout(): void {\n      localStorage.removeItem(this.tokenName);\n      this.isLogged = false;\n   }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}